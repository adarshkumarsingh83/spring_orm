<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
       default-init-method="init" default-destroy-method="destroy"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/util
                            http://www.springframework.org/schema/util/spring-util-2.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">


    <!-- ========= Abstract Repository Class Configuration =========-->
    <bean id="repositoryImpl" class="com.adarsh.spring.repository.impl.EmployeeRepositoryImpl">
        <property name="sessionFactory" ref="hibernateSessionFactory"/>
    </bean>

    <!-- ========= Repository Class Scanning =========-->
    <context:component-scan base-package="com.adarsh.spring.repository.impl">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>

    <!-- ========= Entity Class Scanning =========-->
    <util:list id="hibernatePackagesToScan">
        <value>com.adarsh.spring.entity.impl</value>
    </util:list>

    <!-- ========= Hibernate Session Factory  =========-->
    <bean id="hibernateSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" ref="hibernatePackagesToScan"/>
        <property name="hibernateProperties" ref="defaultHibernateProperties"/>
    </bean>

    <!-- ========= Hibernate Properties  =========-->
    <bean id="defaultHibernateProperties"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">
                    ${hibernate.hbm2ddl.auto}
                </prop>
                <prop key="hibernate.max_fetch_depth">
                    ${hibernate.max_fetch_depth}
                </prop>
                <prop key="hibernate.jdbc.batch_size">
                    ${hibernate.batch_size}
                </prop>
                <prop key="hibernate.jdbc.use_scrollable_resultset">
                    ${hibernate.jdbc.use_scrollable_resultset}
                </prop>
                <prop key="hibernate.dialect">
                    ${hibernate.dialect}
                </prop>

                <prop key="hibernate.cache.provider_class">
                    ${hibernate.cache.provider_class}
                </prop>
                <prop key="hibernate.cache.use_second_level_cache">
                    ${hibernate.cache.use_second_level_cache}
                </prop>

                <prop key="hibernate.show_sql">
                    ${hibernate.show_sql}
                </prop>
                <prop key="hibernate.format_sql">
                    ${hibernate.format_sql}
                </prop>
                <prop key="hibernate.generate_statistics">
                    ${hibernate.generate_statistics}
                </prop>
            </props>
        </property>
    </bean>


    <!-- ========= Transactions =========-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="hibernateSessionFactory"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" mode="proxy"/>

    <!-- manager transactions, we want rollback for the entire method -->
    <!--<tx:advice id="ManagerTxAdvice" transaction-manager="transactionManager">-->
    <!--<tx:attributes>-->
    <!--<tx:method name="get" read-only="true" propagation="REQUIRED"/>-->
    <!--<tx:method name="find" read-only="true" propagation="REQUIRED"/>-->
    <!--<tx:method name="fetch" read-only="true" propagation="REQUIRED"/>-->
    <!--<tx:method name="*" read-only="false" propagation="REQUIRED"/>-->
    <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--<aop:config>-->
    <!--<aop:pointcut id="aop-pointcut-ManagerImpl"-->
    <!--expression="execution(* com.adarsh.spring.managers..*ManagerImpl*.*(..))"/>-->
    <!--<aop:advisor advice-ref="ManagerTxAdvice" pointcut-ref="aop-pointcut-ManagerImpl"/>-->
    <!--</aop:config>-->


    <!-- repository transactions, we want rollback for the entire method -->
    <tx:advice id="RepositoryTxAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="save*" read-only="false" propagation="REQUIRES_NEW"/>
            <tx:method name="delete*" read-only="false" propagation="REQUIRES_NEW"/>
            <tx:method name="update*" read-only="false" propagation="REQUIRES_NEW"/>
           <!-- <tx:method name="*" read-only="false" propagation="REQUIRED"/>-->
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="aop-pointcut-RepositoryImpl"
                      expression="execution(* com.adarsh.spring.repository..*RepositoryImpl*.*(..))"/>
        <aop:advisor advice-ref="RepositoryTxAdvice" pointcut-ref="aop-pointcut-RepositoryImpl"/>
    </aop:config>


</beans>